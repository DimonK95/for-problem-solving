#include <stdio.h>
#include <iostream>
#include <vector>
#include <map>
#include <stack>
#include <set>
#include <queue>
#include <string.h>
#include <iomanip>
#include <numeric>
#include <string>
#include <time.h>
#include <algorithm>
#include <assert.h>
using namespace std;
#define mp make_pair

typedef long long li;
#define forn(i, n) for (int i = 0; i < int(n); i++)
#define sz(a) int((a).size())
const int N = 2e5 + 5;
const int K = 18;
const int X = 350;
const li MOD = 1e9 + 7;
const li P = 100001;

int s[N];
int h = 0;
int c[K][N];
int p[N];
int n;

bool cmp(int a, int b) {
	if (h == 0) 
		return s[a] < s[b];

	if (c[h - 1][a] != c[h - 1][b])
		return c[h - 1][a] < c[h - 1][b];

	a += (1 << (h - 1)); b += (1 << (h - 1));
	return c[h - 1][a] < c[h - 1][b];
}

void sa() {
	iota(p, p + n, 0);
	for (h = 0; ; h++) {
		sort(p, p + n, cmp);
		c[h][p[0]] = 0;
		for (int i = 1; i < n; i++) 
			c[h][p[i]] = c[h][p[i - 1]] + cmp(p[i - 1], p[i]);
		if (c[h][p[n - 1]] == n - 1)break;
	}
}
int lcp(int a, int b) {
	int ans = 0;
	for (int i = h; i >= 0; i--) {
		if (c[i][a] == c[i][b]) {
			a += (1 << i), b += (1 << i);
			ans += (1 << i);
		}
	}
	return ans;
}

int ST[K][N];
int lg[(1 << K)];

void sp() {
	for (int k = 0; k < K; k++) 
		for (int j = (1 << k); j < (1 << (k + 1)); j++)
			lg[j] = k;

	for (int k = 0; k < K; k++) {
		for (int i = 0; i < n; i++) {
			if (k == 0)
				ST[k][i] = lcp(p[i], p[i + 1]);
			else {
				ST[k][i] = ST[k - 1][i];
				int ni = i + (1 << (k - 1));
				if (ni < n)
					ST[k][i] = min(ST[k][i], ST[k - 1][ni]);
			}
		}
	}
}

inline int get_min(int l, int r) {
	assert(l < r);
	r--;
	int len = lg[r - l + 1];
	return min(ST[len][l], ST[len][r - (1 << len) + 1]);
}

int num[N];
int nearTerm[N];
int last[N];
int len[N];
int L[N];
int nc, k;

bool can(int idx, int lcp) {
	int l, r;

	l = 0;
	r = idx - 1;
	while (r - l > 2) {
		int mid = (l + r) >> 1;
		if (get_min(mid, idx) < lcp) l = mid;
		else r = mid;
	}
	int LL = -1;
	for (int mid = r; mid >= l; mid--) {
		if (get_min(mid, idx) < lcp) {
			LL = mid; break;
		}
	}
	LL++;

	l = idx + 1;
	r = n - 1;
	while (r - l > 2) {
		int mid = (l + r) >> 1;
		if (get_min(idx, mid) < lcp) r = mid;
		else l = mid;
	}
	int RR = n;
	for (int mid = l; mid <= r; mid++) {
		if (get_min(idx, mid) < lcp) {
			RR = mid; break;
		}
	}
	RR--;
	return (LL <= L[RR]);
}

li ans[N];
int main() {
#if _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	cout.sync_with_stdio(false);
	cin.tie(0);
	cin >> nc >> k;
	int szs = 0;
	int fix = -1;
	for (int i = 0; i < nc; i++) {
		string t;
		cin >> t;
		for (int i = 0; i < t.length(); i++) {
			s[szs++] += t[i];
		}
		s[szs++] = fix--;
	}

	n = szs;
	sa();
	sp();

	for (int i = n - 1; i >= 0; i--) {
		if (s[i] < 0) {
			len[i] = 0;
			nearTerm[i] = -s[i] - 1;
		}
		else {
			len[i] = len[i + 1] + 1;
			nearTerm[i] = nearTerm[i + 1];
		}
	}

	set<int> str;
	memset(last, -1, sizeof last);
	for (int i = 0; i < n; i++) {
		if (last[nearTerm[p[i]]] != -1)
			str.erase(last[nearTerm[p[i]]]);

		last[nearTerm[p[i]]] = i;
		str.insert(i);
		L[i] = -1;
		if (str.size() > k) {
			str.erase(str.begin());
		}
		if (str.size() == k) {
			L[i] = *str.begin();
		}
	}
	for (int i = 0; i < n; i++) {
		int l = 0;
		int r = len[p[i]];

		while (r - l > 2) {
			int mid = (l + r) >> 1;
			if (can(i, mid)) l = mid;
			else r = mid;
		}
		int idx = 0;
		for (int mid = r; mid >= l; mid--) {
			if (can(i, mid)) {
				idx = mid; 
				break;
			}
		}
		ans[nearTerm[p[i]]] += idx;
	}
	for (int i = 0; i < nc; i++) {
		cout << ans[i] << ' ';
	}
	return 0;
}
