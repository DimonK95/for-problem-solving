#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <math.h>
#include <string.h>
#include <queue>
#include <algorithm>
#include <assert.h>
#include <stack>
#include <stdio.h>
#include <string>
#include <set>
#include <assert.h>
#include <deque>
#include <map>
#include <time.h>
typedef int li;

using namespace std;
const int N = 10022;
const int INF = 1e9;
#define x first
#define y second
typedef pair<int, int> pnt;
#define mp make_pair

int n, m;
int cur;
bool used[N];

int s, t;

struct edge
{
	int to;
	int cap;

	edge(int to, int cap)
	{
		this->to = to;
		this->cap = cap;
	}

	edge() :to(0), cap(0)
	{

	}
};

vector <edge> edges;
vector <int> g[N];

inline void add(int a, int b, int cap, int cap2)
{
	g[a].push_back(edges.size());
	edges.push_back(edge(b, cap));
	g[b].push_back(edges.size());
	edges.push_back(edge(a, cap2));
}

bool dfs(int v)
{
	used[v] = true;
	if (v == t)
	{
		return true;
	}

	for (int i = 0; i < g[v].size(); i++)
	{
		int idx = g[v][i];
		if (!used[edges[idx].to] && edges[idx].cap >= cur && dfs(edges[idx].to))
		{
			edges[idx].cap -= cur;
			edges[idx ^ 1].cap += cur;
			return true;
		}
	}

	return false;
}

int dx[] = { 1, 0, 0, -1 };
int dy[] = { 0, 1, -1, 0 };

int flow() {

	int ans = 0;
	cur = 1;
	while (cur > 0)
	{
		memset(used, false, sizeof(used));
		if (!dfs(s))
		{
			cur = (cur >> 1);
		}
		else
		{
			ans += cur;
		}
	}
	return ans;
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int k;
	cin >> n >> k;
	vector <string> str(n);
	for (int i = 0; i < n; i++)
	{
		cin >> str[i];
	}


	t = k * n + 1;
	s = k * n + 2;

	int cnt = 0;
	int cnt2 = 0;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < k; j++)
		{
			if (str[i][j] == '#') continue;
			if (((i + j) & 1) == 0)
			{
				cnt2++;
				add(i * k + j, t, 1, 0);
				continue;
			}
			cnt++;
			add(s, i * k + j, 1, 0);
			for (int jj = 0; jj < 4; jj++)
			{
				int nx = i + dx[jj];
				int ny = j + dy[jj];
				if (nx >= 0 && ny >= 0 && nx < n && ny < k && str[nx][ny] != '#')
				{
					add(i * k + j, nx * k + ny, 1, 0);
				}
			}
		}
	}

	int ans = flow();

	if (ans == cnt && ans == cnt2)
	{
		cout << "Yes";
	}
	else
	{
		cout << "No";
	}
	return 0;
}
